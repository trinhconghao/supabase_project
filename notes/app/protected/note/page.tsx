"use client";

import { useState, useEffect } from "react";
import { createClient } from "@/utils/supabase/client";

export default function NotesPage() {
  const supabase = createClient();
  const [notes, setNotes] = useState<any[]>([]);
  const [currentNote, setCurrentNote] = useState("");
  const [selectedNote, setSelectedNote] = useState<any | null>(null);
  const [emailToShare, setEmailToShare] = useState("");

  // Fetch notes and shared notes
  useEffect(() => {
    async function fetchNotes() {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // 1Ô∏è‚É£ L·∫•y danh s√°ch ghi ch√∫ do m√¨nh t·∫°o
      const { data: myNotes, error: myNotesError } = await supabase
        .from("Note")
        .select("*")
        .eq("authorId", user.id);

      // 2Ô∏è‚É£ L·∫•y danh s√°ch ID c·ªßa c√°c note ƒë∆∞·ª£c share v·ªõi m√¨nh
      const { data: sharedNotesIds, error: sharedIdsError } = await supabase
        .from("notes_share")
        .select("noteId")
        .eq("sharedUserId", user.id);

      if (myNotesError || sharedIdsError) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", myNotesError || sharedIdsError);
        return;
      }

      // 3Ô∏è‚É£ N·∫øu c√≥ note ƒë∆∞·ª£c share, l·∫•y n·ªôi dung chi ti·∫øt
      let sharedNotes = [];
      if (sharedNotesIds.length > 0) {
        const { data: fetchedSharedNotes, error: sharedNotesError } = await supabase
          .from("Note")
          .select("*")
          .in("id", sharedNotesIds.map((n) => n.noteId));

        if (sharedNotesError) {
          console.error("L·ªói l·∫•y note ƒë∆∞·ª£c share:", sharedNotesError);
          return;
        }
        sharedNotes = fetchedSharedNotes || [];
      }

      // 4Ô∏è‚É£ G·ªôp danh s√°ch l·∫°i
      setNotes([...myNotes, ...sharedNotes]);
    }

    fetchNotes();
  }, []);

  // Realtime Subscription cho `Note` & `notes_share`
  useEffect(() => {
    const notesChannel = supabase
      .channel("realtime_notes")
      .on("postgres_changes", { event: "*", schema: "public", table: "Note" }, (payload) => {
        if (payload.eventType === "INSERT") {
          setNotes((prev) => [...prev, payload.new]);
        } else if (payload.eventType === "UPDATE") {
          setNotes((prev) =>
            prev.map((note) => (note.id === payload.new.id ? payload.new : note))
          );
        } else if (payload.eventType === "DELETE") {
          setNotes((prev) => prev.filter((note) => note.id !== payload.old.id));
        }
      })
      .subscribe();

    return () => {
      supabase.removeChannel(notesChannel);
    };
  }, []);

  // L∆∞u ghi ch√∫ (T·∫°o m·ªõi ho·∫∑c C·∫≠p nh·∫≠t)
  const handleSave = async () => {
    if (!currentNote.trim()) return;

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");
      return;
    }

    const token = session.access_token;

    if (selectedNote) {
      // C·∫≠p nh·∫≠t ghi ch√∫
      const { error } = await supabase
        .from("Note")
        .update({ text: currentNote })
        .eq("id", selectedNote.id);

      if (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t ghi ch√∫:", error);
      } else {
        setNotes((prev) =>
          prev.map((note) => (note.id === selectedNote.id ? { ...note, text: currentNote } : note))
        );
      }
    } else {
      // T·∫°o m·ªõi ghi ch√∫
      const { error } = await supabase
        .from("Note")
        .insert([{ text: currentNote, authorId: session.user.id }]);

      if (error) {
        console.error("L·ªói t·∫°o ghi ch√∫:", error);
      }
    }

    // Reset form
    setSelectedNote(null);
    setCurrentNote("");
  };

  // X√≥a ghi ch√∫
  const handleDelete = async (id: string) => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a ghi ch√∫!");
      return;
    }

    const token = session.access_token;

    const res = await fetch(`/api/notes/${id}`, {
      method: "DELETE",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    });

    if (res.ok) {
      setNotes(notes.filter((note) => note.id !== id));
    }
  };

  // Chia s·∫ª ghi ch√∫ v·ªõi email nh·∫≠p v√†o
  const handleShare = async () => {
    if (!selectedNote || !emailToShare.trim()) return;

    // T√¨m user theo email
    const { data: user, error } = await supabase
      .from("User")
      .select("id")
      .eq("email", emailToShare)
      .single();

    if (error || !user) {
      alert("Email n√†y kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    // Ghi v√†o b·∫£ng `notes_share`
    const { error: shareError } = await supabase
      .from("notes_share")
      .insert([{ noteId: selectedNote.id, sharedUserId: user.id }]);

    if (shareError) {
      console.error("L·ªói khi chia s·∫ª ghi ch√∫:", shareError);
      alert("Chia s·∫ª th·∫•t b·∫°i!");
    } else {
      alert("Chia s·∫ª th√†nh c√¥ng!");
      setEmailToShare("");
    }
  };

  // X·ª≠ l√Ω khi ch·ªçn ghi ch√∫
  const handleSelectNote = (note: any) => {
    if (selectedNote?.id === note.id) {
      // N·∫øu ghi ch√∫ ƒë√£ ƒë∆∞·ª£c ch·ªçn, quay l·∫°i tr·∫°ng th√°i t·∫°o m·ªõi
      setSelectedNote(null);
      setCurrentNote(""); // Reset n·ªôi dung
    } else {
      // Ch·ªçn ghi ch√∫ v√† hi·ªÉn th·ªã n·ªôi dung
      setSelectedNote(note);
      setCurrentNote(note.text);
    }
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <aside className="w-1/4 bg-gray-100 p-4 border-r">
        <h2 className="text-lg font-semibold mb-4">Danh s√°ch ghi ch√∫</h2>
        <ul className="space-y-2">
          {notes.map((note) => (
            <li
              key={note.id}
              className={`p-2 cursor-pointer rounded flex justify-between items-center ${
                selectedNote?.id === note.id ? "bg-blue-200" : "hover:bg-gray-200"
              }`}
            >
              <span
                onClick={() => handleSelectNote(note)}
                className="flex-1 cursor-pointer truncate"
              >
                {note.text}
              </span>
              <button
                onClick={() => handleDelete(note.id)}
                className="text-red-500 ml-2 p-1 rounded border hover:border-gray-400"
              >
                üóëÔ∏è
              </button>
            </li>
          ))}
        </ul>
      </aside>

      {/* Main Content */}
      <main className="flex-1 p-6">
        <h1 className="text-2xl font-bold mb-4">Ghi ch√∫</h1>

        {/* Input ghi ch√∫ */}
        <textarea
          value={currentNote}
          onChange={(e) => setCurrentNote(e.target.value)}
          className="border p-2 rounded w-full h-40 resize-none"
        />
        <button onClick={handleSave} className="mt-2 bg-blue-500 text-white px-4 py-2 rounded w-full">
          {selectedNote ? "L∆∞u" : "T·∫°o"}
        </button>

        {/* Chia s·∫ª ghi ch√∫ */}
        {selectedNote && (
          <div className="mt-4">
            <input
              type="email"
              value={emailToShare}
              onChange={(e) => setEmailToShare(e.target.value)}
              className="border p-2 rounded w-full"
              placeholder="Nh·∫≠p email ƒë·ªÉ chia s·∫ª"
            />
            <button
              onClick={handleShare}
              className="mt-2 bg-green-500 text-white px-4 py-2 rounded w-full"
            >
              Chia s·∫ª
            </button>
          </div>
        )}
      </main>
    </div>
  );
}
